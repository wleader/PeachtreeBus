<LogMessages xmlns="http://tempuri.org/LogMessages.xsd">
    <Namespace name="PeachtreeBus">
        <Class name="BaseThread">
            <Event name="ThreadStart" level="Information">
                Starting {ThreadName:string} thread.
            </Event>
            <Event name="ThreadStop" level="Information">
                Thread {ThreadName:string} stopoped.
            </Event>
            <Event name="ThreadError" level="Error" exception="true">
                Thread {ThreadName:string} errored.
            </Event>
        </Class>
    </Namespace>
    <Namespace name="PeachtreeBus_Data">
        <Class name="DapperDataAccess">
            <Event name="DataAccessError" level="Error" exception="true">
                There was an exception interacting with the database. Method: {Method:string}.
            </Event>
        </Class>
    </Namespace>
    <Namespace name="PeachtreeBus_Queues">
        <Class name="QueueReader">
            <Event name="HeaderNotDeserializable" level="Warning" exception="true">
                Headers could not be deserialized for message {MessageId:Guid} from queue {QueueName:string}.
            </Event>
            <Event name="BodyNotDeserializable" level="Warning" exception="true">
                Body could not be deserialized for message {MessageId:Guid} from queue {QueueName:string}.
            </Event>
            <Event name="MessageClassNotRecognized" level="Warning">
                Message class '{MessageClass:string}' was not recognized for message {MessageId:Guid} from queue {QueueName:string}.
            </Event>
            <Event name="MessageExceededMaxRetries" level="Warning">
                Message {MessageId:Guid} from queue {QueueName:string} exceeded the maximum number of allowed retries ({MaxRetries:int}) and has failed.
            </Event>
            <Event name="MessageWillBeRetried" level="Warning">
                Message {MessageId:Guid} from queue {QueueName:string} will be retried after {NotBefore:DateTime}.
            </Event>
            <Event name="LoadingSagaData" level="Information">
                Loading saga data for {SagaName:string} - {SagaKey:string}.
            </Event>
            <Event name="DeletingSagaData" level="Information">
                Deleting saga data for {SagaName:string} - {SagaKey:string}.
            </Event>
            <Event name="SavingSagaData" level="Information">
                Saving saga data for {SagaName:string} - {SagaKey:string}.
            </Event>
        </Class>
        <Class name="QueueWork">
            <Event name="ProcessingMessage" level="Debug">
                Processing Message {MessageId:Guid}, Type: {MessageClass:string}.
            </Event>
            <Event name="LoadingSaga">
                Saga Loading {SagaType:string} {SagaKey:string}.
            </Event>
            <Event name="SagaBlocked" level="Information">
                The saga {SagaType:string} for key {SagaKey:string} is blocked. The current message will be delayed and retried.
            </Event>
            <Event name="InvokeHandler" level="Debug">
                Handling message {MessageId:Guid} of type {MessageClass:string} with {HandlerType:string}.
            </Event>
            <Event name="SagaSaved" level="Debug">
                Saga Saved {SagaType:string} {SagaKey:string}.
            </Event>
            <Event name="HandlerException" level="Warning" exception="true">
                There was an exception in {HandlerType:string} when handling Message {MessageId:Guid} of type {MessageType:string}.
            </Event>
        </Class>
    </Namespace>
    <Namespace name="PeachtreeBus_Subscriptions">
        <Class name="SubscribedWork">
            <Event name="ProcessingMessage" level="Debug">
                Processing message {MessageId:Guid} for subscriber {SubscriberId:Guid}.
            </Event>
            <Event name="MessageHandlerException" level="Warning" exception="true">
                There was an exception while processing message {MessageId:Guid} for subscriber {SusbscriberId:Guid}.
            </Event>
        </Class>
        <Class name="SubscribedReader">
            <Event name="MessageExceededMaxRetries" level="Warning">
                Message {MessageId:Guid} for Subscriber {SubscriberId:Guid} execeed the max number of retries ({MaxRetries:int}) and has failed.
            </Event>
            <Event name="HeaderNotDeserializable" level="Warning" exception="true">
                Headers could not be deserialized for message {MessageId:Guid} for subscriber {SubscriberId:Guid}.
            </Event>
            <Event name="BodyNotDeserializable" level="Warning" exception="true">
                Message Body could not be deserialized for message {MessageId:Guid} for subscriber {SubscriberId:Guid}.
            </Event>
            <Event name="MessageClassNotRecognized" level="Warning">
                Message class '{MessageClass:string}' was not recognized for message {MessageId:Guid} for subscriber {SubscriberId:Guid}.
            </Event>
            <Event name="MessageWillBeRetried" level="Warning">
                Message {MessageId:Guid} from Subscriber {SubscriberId:Guid} will be retried after {NotBefore:DateTime}.
            </Event>
        </Class>
    </Namespace>
    <Namespace name="PeachtreeBus_Errors">
        <Class name="QueueFailures">
            <Event name="NoHandler" level="Error" exception="true">
                No implemenation of IHandleFailedQueueMessages was available. You can register DefaultFailedQueueMessageHandler with your dependency injection provider to disable this message.
            </Event>
            <Event name="HandlerThrow" level="Error" exception="true">
                Failed Queue Message Handler {HandlerType:Type} threw an exception while handling a message of type {MessageType:Type}. Database will be rolled back.
            </Event>
            <Event name="MessageFailed" level="Warning">
                A queue message of type {MessageType:Type} exceeded its maximum retries and has failed.
            </Event>
        </Class>
        <Class name="SubscribedFailures">
            <Event name="NoHandler" level="Error" exception="true">
                No implemenation of IHandleFailedSubscribedMessages was available. You can register DefaultFailedSubscribedMessageHandler with your dependency injection provider to disable this message.
            </Event>
            <Event name="HandlerThrow" level="Error" exception="true">
                Failed Subscribed Message Handler {HandlerType:Type} threw an exception while handling a message of type {MessageType:Type}. Database will be rolled back.
            </Event>
            <Event name="MessageFailed" level="Warning">
                A subscribed message of type {MessageType:Type} exceeded its maximum retries and has failed.
            </Event>
        </Class>
    </Namespace>
</LogMessages>
